/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6/userguide/java_library_plugin.html
 */

plugins {
    id 'java-library'  // to build JVM libraries
    id 'maven-publish' // to publish artifacts to Maven repositories
}

group = 'com.github.capdevon'
version = '0.0.1'

java {
    // select one source-code (JDK) option
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext {
    // select one version of the Engine:
    jmeVersion = '3.6.1-stable'
    jacksonVersion = '2.13.0'
    yamlVersion = '1.30'
    
    artifact = 'jme-material-portable'
    baseName = "${artifact}-${version}" // for artifacts
}

repositories {
    mavenCentral()
}

dependencies {
    // jMonkeyEngine
    implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-plugins:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion // LWJGL 3.x
    
    implementation 'com.fasterxml.jackson.core:jackson-core:' + jacksonVersion
    implementation 'com.fasterxml.jackson.core:jackson-annotations:' + jacksonVersion
    implementation 'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:' + jacksonVersion
    implementation 'org.yaml:snakeyaml:' + yamlVersion
    
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn 'publishToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}

jar {
    archiveBaseName = project.ext.baseName
    doLast {
        println "using Java ${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
    manifest {
        attributes 'Created-By': "${JavaVersion.current()} (${System.getProperty("java.vendor")})"
    }
}
java.withJavadocJar()

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.ext.artifact
            groupId = "${group}"
            version = "${version}"
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

publishToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}
